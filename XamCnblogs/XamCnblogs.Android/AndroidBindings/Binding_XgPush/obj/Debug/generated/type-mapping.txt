com/tencent/android/tpush/common/Constants = Com.Tencent.Android.Tpush.Common.Constants
  <init>()V = .ctor()
  ACTION_BROADCAST_ACKNOWLEDGE_ACK = ActionBroadcastAcknowledgeAck
  ACTION_FEEDBACK = ActionFeedback
  ACTION_INTERNAL_PUSH_MESSAGE = ActionInternalPushMessage
  ACTION_KEEPALIVE = ActionKeepalive
  ACTION_PREFFIX = ActionPreffix
  ACTION_PUSH_MESSAGE = ActionPushMessage
  ACTION_SDK_INSTALL = ActionSdkInstall
  ACTION_SDK_NOTIFICATION_CLEARED = ActionSdkNotificationCleared
  ACTION_SDK_TYPE = ActionSdkType
  ACTION_SLVAE_2_MAIN = ActionSlvae2Main
  ACTION_START_SLVAE = ActionStartSlvae
  ACTION_STOP_CONNECT = ActionStopConnect
  CODE_ACCESSKET_OR_ACCESSID_ERROR = CodeAccessketOrAccessidError
  CODE_AIDL_ERROR = CodeAidlError
  CODE_DUPLICATE_REGISTER_EEROR = CodeDuplicateRegisterEeror
  CODE_JCE_ERROR = CodeJceError
  CODE_LOGIC_ILLEGAL_ARGUMENT = CodeLogicIllegalArgument
  CODE_LOGIC_REGISTER_IN_PROCESS = CodeLogicRegisterInProcess
  CODE_NETWORK_CHANNEL_CANCELLED = CodeNetworkChannelCancelled
  CODE_NETWORK_CREATE_OPTIOMAL_SC_FAILED = CodeNetworkCreateOptiomalScFailed
  CODE_NETWORK_HANDLER_NULL = CodeNetworkHandlerNull
  CODE_NETWORK_INNER_EXCEPTION_OCCUR = CodeNetworkInnerExceptionOccur
  CODE_NETWORK_IOEXCEPTION_OCCUR = CodeNetworkIoexceptionOccur
  CODE_NETWORK_SECERETY_EEROR = CodeNetworkSeceretyEeror
  CODE_NETWORK_TIMEOUT_EXCEPTION_OCCUR = CodeNetworkTimeoutExceptionOccur
  CODE_NETWORK_TIMEOUT_WAITING_FOR_RESPONSE = CodeNetworkTimeoutWaitingForResponse
  CODE_NETWORK_TIMEOUT_WAITING_TO_SEND = CodeNetworkTimeoutWaitingToSend
  CODE_NETWORK_UNEXPECTED_DATA_EXCEPTION_OCCUR = CodeNetworkUnexpectedDataExceptionOccur
  CODE_NETWORK_UNKNOWN_EXCEPTION = CodeNetworkUnknownException
  CODE_NETWORK_UNREACHABLE = CodeNetworkUnreachable
  CODE_PERMISSIONS_ERROR = CodePermissionsError
  CODE_PROVIDER_ERROR = CodeProviderError
  CODE_SERVICE_DISABLED = CodeServiceDisabled
  CODE_SO_ERROR = CodeSoError
  CODE_STRATEGY_INIT = CodeStrategyInit
  CODE_SUCCESS = CodeSuccess
  E_MOBILE_CHINAMOBILE = EMobileChinamobile
  E_MOBILE_TELCOM = EMobileTelcom
  E_MOBILE_UNICOM = EMobileUnicom
  E_MOBILE_UNKNOWN = EMobileUnknown
  ERRORCODE_UNKNOWN = ErrorcodeUnknown
  FEEDBACK_ERROR_CODE = FeedbackErrorCode
  FEEDBACK_NOTIFACTION_CLICKED = FeedbackNotifactionClicked
  FEEDBACK_NOTIFACTION_SHOWED = FeedbackNotifactionShowed
  FEEDBACK_REGISTER = FeedbackRegister
  FEEDBACK_SET_DELETE_TAG = FeedbackSetDeleteTag
  FEEDBACK_TAG = FeedbackTag
  FEEDBACK_UNREGISTER = FeedbackUnregister
  FLAG_ACC_ID = FlagAccId
  FLAG_ACCOUNT = FlagAccount
  FLAG_ACTION_CONFIRM = FlagActionConfirm
  FLAG_ACTION_TYPE = FlagActionType
  FLAG_ACTIVITY_NAME = FlagActivityName
  FLAG_CLICK_DELETE_ACTION = FlagClickDeleteAction
  FLAG_CLICK_TIME = FlagClickTime
  FLAG_DEVICE_ID = FlagDeviceId
  FLAG_NOTIFICATION_ACTION_TYPE = FlagNotificationActionType
  FLAG_OFFLINE = FlagOffline
  FLAG_ONLINE = FlagOnline
  FLAG_PACKAGE_DOWNLOAD_URL = FlagPackageDownloadUrl
  FLAG_PACKAGE_NAME = FlagPackageName
  FLAG_PACK_NAME = FlagPackName
  FLAG_TAG_NAME = FlagTagName
  FLAG_TAG_TYPE = FlagTagType
  FLAG_TICKET = FlagTicket
  FLAG_TICKET_TYPE = FlagTicketType
  FLAG_TOKEN = FlagToken
  HorseLogTag = HorseLogTag
  IS_CACHE_CLEAR = IsCacheClear
  IS_CLEAR_CACHE = IsClearCache
  LOCAL_MESSAGE_FLAG = LocalMessageFlag
  LOC_REPORT_TIME = LocReportTime
  LogTag = LogTag
  MAIN_VERSION_TAG = MainVersionTag
  MSDK_TAG = MsdkTag
  MSG_CUSTOM_CONTENT = MsgCustomContent
  MTA_MSG_ARRIVE = MtaMsgArrive
  MTA_MSG_OPEN = MtaMsgOpen
  MTA_MSG_OPEN_TIME = MtaMsgOpenTime
  NETWORK_RESTAT_DELAY_TIME = NetworkRestatDelayTime
  NETWORK_TYPE_2G = NetworkType2g
  NETWORK_TYPE_3G = NetworkType3g
  NETWORK_TYPE_4G = NetworkType4g
  NETWORK_TYPE_UNCONNECTED = NetworkTypeUnconnected
  NETWORK_TYPE_UNKNOWN = NetworkTypeUnknown
  NETWORK_TYPE_WIFI = NetworkTypeWifi
  OTHER_PUSH_TAG = OtherPushTag
  PARAM_NEED_CACHE = ParamNeedCache
  PRO_LOG_TAG = ProLogTag
  PROTOCOL_HTTP = ProtocolHttp
  PROTOCOL_NONE = ProtocolNone
  PROTOCOL_TCP = ProtocolTcp
  PushMessageLogTag = PushMessageLogTag
  PUSH_SDK_VERSION = PushSdkVersion
  REDIRECTED_NO = RedirectedNo
  REDIRECTED_YES = RedirectedYes
  REGISTER_FAIL = RegisterFail
  REGISTER_INIT = RegisterInit
  REGISTER_IN_PROGRESS = RegisterInProgress
  REGISTER_OK = RegisterOk
  REPORT_LOG_TAG = ReportLogTag
  RPC_SUFFIX = RpcSuffix
  ServiceLogTag = ServiceLogTag
  SETTINGS_ENABLE_APPLIST = SettingsEnableApplist
  SETTINGS_ENABLE_DEBUG_NAME = SettingsEnableDebugName
  SETTINGS_ENABLE_FCM = SettingsEnableFcm
  SETTINGS_ENABLE_FOREIGINPUSH = SettingsEnableForeiginpush
  SETTINGS_ENABLE_LOCATION = SettingsEnableLocation
  SETTINGS_ENABLE_NOTIFICATION = SettingsEnableNotification
  SETTINGS_ENABLE_OTHER_PUSH = SettingsEnableOtherPush
  SETTINGS_SERVICE_PACKAGE_NAME = SettingsServicePackageName
  SETTINGS_SOCKET_NAME = SettingsSocketName
  SETTINGS_UNREGISTER_INFO_NAME = SettingsUnregisterInfoName
  SHARED_PREFS_KEY_REGISTER = SharedPrefsKeyRegister
  SHARED_PREFS_NAME = SharedPrefsName
  TAG_TPUSH_MESSAGE = TagTpushMessage
  TAG_TPUSH_NOTIFICATION = TagTpushNotification
  TcpRecvPackLogTag = TcpRecvPackLogTag
  TcpSendPackLogTag = TcpSendPackLogTag
  TYPE_DELETE_KEY_VALUE_TAG = TypeDeleteKeyValueTag
  TYPE_DELETE_TAG = TypeDeleteTag
  TYPE_SET_KEY_VALUE_TAG = TypeSetKeyValueTag
  TYPE_SET_TAG = TypeSetTag
  UNREGISTER_FAIL = UnregisterFail
  UNREGISTER_INIT = UnregisterInit
  UNREGISTER_IN_PROGRESS = UnregisterInProgress
  UNREGISTER_OK = UnregisterOk
  UNSTALL_DOMAIN = UnstallDomain
  UNSTALL_PORT = UnstallPort
  UNSTALL_URL = UnstallUrl
  VIVO_STR = VivoStr
  XG_SERVICE_CONN_COMPATIBLE_VERSION = XgServiceConnCompatibleVersion
  errCodeToMsg(I)Ljava/lang/String; = ErrCodeToMsg(int)
com/tencent/android/tpush/common/MessageKey = Com.Tencent.Android.Tpush.Common.MessageKey
  <init>()V = .ctor()
  MSG_ACCEPT_TIME = MsgAcceptTime
  MSG_ACCEPT_TIME_END = MsgAcceptTimeEnd
  MSG_ACCEPT_TIME_HOUR = MsgAcceptTimeHour
  MSG_ACCEPT_TIME_MIN = MsgAcceptTimeMin
  MSG_ACCEPT_TIME_START = MsgAcceptTimeStart
  MSG_ACCESS_ID = MsgAccessId
  MSG_ACTION = MsgAction
  MSG_BUILDER_ID = MsgBuilderId
  MSG_BUSI_MSG_ID = MsgBusiMsgId
  MSG_CLEARABLE = MsgClearable
  MSG_CONTENT = MsgContent
  MSG_CREATE_MULTIPKG = MsgCreateMultipkg
  MSG_CREATE_TIMESTAMPS = MsgCreateTimestamps
  MSG_CUSTOM_CONTENT = MsgCustomContent
  MSG_DATE = MsgDate
  MSG_EXPIRE_TIME = MsgExpireTime
  MSG_EXTRA_HOST = MsgExtraHost
  MSG_EXTRA_PACT = MsgExtraPact
  MSG_EXTRA_PORT = MsgExtraPort
  MSG_EXTRA_PUSHTIME = MsgExtraPushtime
  MSG_ICON = MsgIcon
  MSG_ICON_RES = MsgIconRes
  MSG_ICON_TYPE = MsgIconType
  MSG_ID = MsgId
  MSG_LIGHTS = MsgLights
  MSG_NOTIFY_ID = MsgNotifyId
  MSG_PORTECT_TAG = MsgPortectTag
  MSG_RING = MsgRing
  MSG_RING_RAW = MsgRingRaw
  MSG_SERVER_TIME = MsgServerTime
  MSG_SERVICE_ACK = MsgServiceAck
  MSG_SERVICE_PACKAGE_NAME = MsgServicePackageName
  MSG_SMALL_ICON = MsgSmallIcon
  MSG_STYLE_ID = MsgStyleId
  MSG_TIME_GAP = MsgTimeGap
  MSG_TITLE = MsgTitle
  MSG_TTL = MsgTtl
  MSG_TYPE = MsgType
  MSG_VIBRATE = MsgVibrate
  NOTIFACTION_ID = NotifactionId
com/tencent/android/tpush/data/CachedMessageIntent = Com.Tencent.Android.Tpush.Data.CachedMessageIntent
  <init>()V = .ctor()
  intent = Intent
  msgId = MsgId
  pkgName = PkgName
com/tencent/android/tpush/data/MessageId = Com.Tencent.Android.Tpush.Data.MessageId
  <init>()V = .ctor()
  accessId = AccessId
  apn = Apn
  busiMsgId = BusiMsgId
  date = Date
  FLAG_ACK = FlagAck
  FLAG_UNACK = FlagUnack
  host = Host
  id = Id
  isAck = IsAck
  isp = Isp
  msgType = MsgType
  multiPkg = MultiPkg
  pact = Pact
  pkgName = PkgName
  port = Port
  pushTime = PushTime
  receivedTime = ReceivedTime
  serverTime = ServerTime
  serviceHost = ServiceHost
  timestamp = Timestamp
  ttl = Ttl
  a()Z = A()
com/tencent/android/tpush/data/PushClickEntity = Com.Tencent.Android.Tpush.Data.PushClickEntity
  <init>()V = .ctor()
  <init>(JJJJLjava/lang/String;JJI)V = .ctor(long, long, long, long, string, long, long, int)
  accessId = AccessId
  action = Action
  broadcastId = BroadcastId
  clickTime = ClickTime
  msgId = MsgId
  pkgName = PkgName
  timestamp = Timestamp
  type = Type
com/tencent/android/tpush/data/RegisterEntity = Com.Tencent.Android.Tpush.Data.RegisterEntity
  <init>()V = .ctor()
  accessId = AccessId
  accessKey = AccessKey
  appVersion = AppVersion
  guid = Guid
  packageName = PackageName
  state = State
  timestamp = Timestamp
  token = Token
  TYPE_REGISTER = TypeRegister
  TYPE_REMOTE_UNINSTALL = TypeRemoteUninstall
  TYPE_REMOTE_UNREGISTER = TypeRemoteUnregister
  TYPE_UNINSTALL = TypeUninstall
  TYPE_UNREGISTER = TypeUnregister
  xgSDKVersion = XgSDKVersion
  a()Z = A()
  a(Lcom/tencent/android/tpush/data/RegisterEntity;)Ljava/lang/String; = A(Com.Tencent.Android.Tpush.Data.RegisterEntity)
  a(Ljava/lang/String;)Lcom/tencent/android/tpush/data/RegisterEntity; = A(string)
  b()Z = B()
  c()Z = C()
com/tencent/android/tpush/data/StorageEntity = Com.Tencent.Android.Tpush.Data.StorageEntity
  <init>()V = .ctor()
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  a = A
  b = B
  c = C
  CREATOR = Creator
  d = D
  e = E
  f = F
  g = G
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/tencent/android/tpush/data/TagEntity = Com.Tencent.Android.Tpush.Data.TagEntity
  <init>()V = .ctor()
  accessId = AccessId
  flag = Flag
  tag = Tag
com/tencent/android/tpush/data/UnregisterInfo = Com.Tencent.Android.Tpush.Data.UnregisterInfo
  <init>()V = .ctor()
  accessId = AccessId
  accessKey = AccessKey
  appCert = AppCert
  isUninstall = IsUninstall
  option = Option
  packName = PackName
  timestamp = Timestamp
  token = Token
  TYPE_UNINSTALL = TypeUninstall
  TYPE_UNREGISTER = TypeUnregister
com/tencent/android/tpush/encrypt/Rijndael = Com.Tencent.Android.Tpush.Encrypt.Rijndael
  <init>()V = .ctor()
  decrypt(Ljava/lang/String;)Ljava/lang/String; = Decrypt(string)
  encrypt(Ljava/lang/String;)Ljava/lang/String; = Encrypt(string)
com/tencent/android/tpush/horse/data/OptStrategyList = Com.Tencent.Android.Tpush.Horse.Data.OptStrategyList
  <init>()V = .ctor()
  a()Lcom/tencent/android/tpush/horse/data/StrategyItem; = A()
  a(Lcom/tencent/android/tpush/horse/data/StrategyItem;)V = A(Com.Tencent.Android.Tpush.Horse.Data.StrategyItem)
  a(J)V = A(long)
  a(S)Ljava/util/List; = A(short)
  b()Lcom/tencent/android/tpush/horse/data/StrategyItem; = B()
  b(Lcom/tencent/android/tpush/horse/data/StrategyItem;)V = B(Com.Tencent.Android.Tpush.Horse.Data.StrategyItem)
  c()Lcom/tencent/android/tpush/horse/data/StrategyItem; = C()
  c(Lcom/tencent/android/tpush/horse/data/StrategyItem;)V = C(Com.Tencent.Android.Tpush.Horse.Data.StrategyItem)
  d()Lcom/tencent/android/tpush/horse/data/StrategyItem; = D()
  d(Lcom/tencent/android/tpush/horse/data/StrategyItem;)V = D(Com.Tencent.Android.Tpush.Horse.Data.StrategyItem)
  e()Lcom/tencent/android/tpush/horse/data/StrategyItem; = E()
  f()Ljava/util/List; = F()
  g()J = G()
com/tencent/android/tpush/horse/data/ServerItem = Com.Tencent.Android.Tpush.Horse.Data.ServerItem
  <init>(JII)V = .ctor(long, int, int)
  <init>(Ljava/lang/String;II)V = .ctor(string, int, int)
  a()Ljava/lang/String; = A()
  b()I = B()
  c()I = C()
com/tencent/android/tpush/horse/data/StrategyItem = Com.Tencent.Android.Tpush.Horse.Data.StrategyItem
  <init>(Ljava/lang/String;ILjava/lang/String;III)V = .ctor(string, int, string, int, int, int)
  a()Ljava/lang/String; = A()
  a(Lcom/tencent/android/tpush/horse/data/StrategyItem;)Z = A(Com.Tencent.Android.Tpush.Horse.Data.StrategyItem)
  a(I)V = A(int)
  b()I = B()
  c()Ljava/lang/String; = C()
  d()I = D()
  e()I = E()
  f()I = F()
  g()Z = G()
  h()Z = H()
  i()Z = I()
  j()Z = J()
com/tencent/android/tpush/horse/DefaultServer = Com.Tencent.Android.Tpush.Horse.DefaultServer
  a = A
  b = B
  c = C
  d = D
  e = E
  f = F
  g = G
  a()I = A()
  a(Ljava/lang/String;)Ljava/util/ArrayList; = A(string)
  b()Ljava/util/ArrayList; = B()
com/tencent/android/tpush/horse/Tools = Com.Tencent.Android.Tpush.Horse.Tools
  <init>()V = .ctor()
  KEY = Key
  SHARE_NAME = ShareName
  STRATEGY = Strategy
  TOOLS_NAME_UNI_SUFFIX = ToolsNameUniSuffix
  TYPE_DEFAULT = TypeDefault
  TYPE_HTTP = TypeHttp
  TYPE_HTTP_WAP = TypeHttpWap
  TYPE_TCP = TypeTcp
  clearAll(Landroid/content/Context;)V = ClearAll(Android.Content.Context)
  clearCacheServerItems(Landroid/content/Context;)V = ClearCacheServerItems(Android.Content.Context)
  clearOptKeyList(Landroid/content/Context;)V = ClearOptKeyList(Android.Content.Context)
  clearOptStrategyItem(Landroid/content/Context;)V = ClearOptStrategyItem(Android.Content.Context)
  clearRegisterInfo(Landroid/content/Context;J)V = ClearRegisterInfo(Android.Content.Context, long)
  getChannelType(Landroid/content/Context;)I = GetChannelType(Android.Content.Context)
  setChannelType(Landroid/content/Context;I)V = SetChannelType(Android.Content.Context, int)
com/tencent/android/tpush/rpc/RemoteService = Com.Tencent.Android.Tpush.Rpc.RemoteService
  <init>()V = .ctor()
com/tencent/android/tpush/rpc/XGRemoteService = Com.Tencent.Android.Tpush.Rpc.XGRemoteService
  <init>()V = .ctor()
  onBind(Landroid/content/Intent;)Landroid/os/IBinder; = OnBind(Android.Content.Intent)
com/tencent/android/tpush/service/cache/CacheManager = Com.Tencent.Android.Tpush.Service.Cache.CacheManager
  getContext()Landroid/content/Context; = Context
  getRegisterEntityMap()Ljava/util/Map; = RegisterEntityMap
  addOptKey(Landroid/content/Context;Ljava/lang/String;)V = AddOptKey(Android.Content.Context, string)
  addOptKeyList(Landroid/content/Context;Ljava/util/HashSet;)V = AddOptKeyList(Android.Content.Context, Java.Util.HashSet)
  addOptStrategy(Lcom/tencent/android/tpush/horse/data/StrategyItem;)V = AddOptStrategy(Com.Tencent.Android.Tpush.Horse.Data.StrategyItem)
  addOptStrategyList(Landroid/content/Context;Ljava/lang/String;Lcom/tencent/android/tpush/horse/data/OptStrategyList;)V = AddOptStrategyList(Android.Content.Context, string, Com.Tencent.Android.Tpush.Horse.Data.OptStrategyList)
  addRegisterInfo(Lcom/tencent/android/tpush/data/RegisterEntity;)V = AddRegisterInfo(Com.Tencent.Android.Tpush.Data.RegisterEntity)
  addServerItems(Landroid/content/Context;Ljava/lang/String;Ljava/util/ArrayList;)V = AddServerItems(Android.Content.Context, string, System.Collections.IList)
  clearDomainServerItem(Landroid/content/Context;)V = ClearDomainServerItem(Android.Content.Context)
  clearOptKeyList(Landroid/content/Context;)V = ClearOptKeyList(Android.Content.Context)
  findValidPackageByAccessid(J)Ljava/lang/String; = FindValidPackageByAccessid(long)
  findValidRegisterEntityByPkg(Ljava/lang/String;)Lcom/tencent/android/tpush/data/RegisterEntity; = FindValidRegisterEntityByPkg(string)
  getCurrentAppRegisterEntity(Landroid/content/Context;)Lcom/tencent/android/tpush/data/RegisterEntity; = GetCurrentAppRegisterEntity(Android.Content.Context)
  getDomain(Landroid/content/Context;)Ljava/lang/String; = GetDomain(Android.Content.Context)
  getDomainKeyList(Landroid/content/Context;)Ljava/util/ArrayList; = GetDomainKeyList(Android.Content.Context)
  getGuid(Landroid/content/Context;)J = GetGuid(Android.Content.Context)
  getLastLoadIpTime(Landroid/content/Context;)J = GetLastLoadIpTime(Android.Content.Context)
  getOptKeyList(Landroid/content/Context;)Ljava/util/HashSet; = GetOptKeyList(Android.Content.Context)
  getOptStrategyList(Landroid/content/Context;Ljava/lang/String;)Lcom/tencent/android/tpush/horse/data/OptStrategyList; = GetOptStrategyList(Android.Content.Context, string)
  getQua(Landroid/content/Context;J)Ljava/lang/String; = GetQua(Android.Content.Context, long)
  getRegisterInfo(Landroid/content/Context;)Ljava/util/List; = GetRegisterInfo(Android.Content.Context)
  getRegisterInfoByPkgName(Ljava/lang/String;)Lcom/tencent/android/tpush/data/RegisterEntity; = GetRegisterInfoByPkgName(string)
  getRegisterInfos(Landroid/content/Context;)Ljava/util/List; = GetRegisterInfos(Android.Content.Context)
  getServerItems(Landroid/content/Context;Ljava/lang/String;)Ljava/util/ArrayList; = GetServerItems(Android.Content.Context, string)
  getSpeedTestList(Landroid/content/Context;)Ljava/util/ArrayList; = GetSpeedTestList(Android.Content.Context)
  getToken(Landroid/content/Context;)Ljava/lang/String; = GetToken(Android.Content.Context)
  getUninstallAndUnregisterInfo(Landroid/content/Context;)Ljava/util/ArrayList; = GetUninstallAndUnregisterInfo(Android.Content.Context)
  getUninstallInfo(Landroid/content/Context;)Ljava/util/List; = GetUninstallInfo(Android.Content.Context)
  getUnregisterInfo(Landroid/content/Context;)Ljava/util/List; = GetUnregisterInfo(Android.Content.Context)
  removeOptStrategyList(Landroid/content/Context;Ljava/lang/String;)V = RemoveOptStrategyList(Android.Content.Context, string)
  removeRegisterInfoByPkgName(Ljava/lang/String;)V = RemoveRegisterInfoByPkgName(string)
  removeRegisterInfos(Ljava/lang/String;)V = RemoveRegisterInfos(string)
  saveDomain(Landroid/content/Context;Ljava/lang/String;)V = SaveDomain(Android.Content.Context, string)
  saveDomainKey(Landroid/content/Context;Ljava/lang/String;)V = SaveDomainKey(Android.Content.Context, string)
  saveDomainKeyList(Landroid/content/Context;Ljava/util/ArrayList;)V = SaveDomainKeyList(Android.Content.Context, System.Collections.IList)
  saveLoadIpTime(Landroid/content/Context;J)V = SaveLoadIpTime(Android.Content.Context, long)
  saveSpeedTestList(Landroid/content/Context;Ljava/util/ArrayList;)V = SaveSpeedTestList(Android.Content.Context, System.Collections.IList)
  setCurrentAppRegisterEntity(Landroid/content/Context;Lcom/tencent/android/tpush/data/RegisterEntity;)V = SetCurrentAppRegisterEntity(Android.Content.Context, Com.Tencent.Android.Tpush.Data.RegisterEntity)
  setQua(Landroid/content/Context;JLjava/lang/String;)V = SetQua(Android.Content.Context, long, string)
  setToken(Landroid/content/Context;Ljava/lang/String;)Z = SetToken(Android.Content.Context, string)
  setTokenAndGuid(Landroid/content/Context;Ljava/lang/String;J)Z = SetTokenAndGuid(Android.Content.Context, string, long)
  UninstallInfoByPkgName(Ljava/lang/String;)V = UninstallInfoByPkgName(string)
  UninstallInfoSuccessByPkgName(Ljava/lang/String;)V = UninstallInfoSuccessByPkgName(string)
  UnregisterInfoByPkgName(Ljava/lang/String;)V = UnregisterInfoByPkgName(string)
  UnregisterInfoSuccessByPkgName(Ljava/lang/String;)V = UnregisterInfoSuccessByPkgName(string)
  updateUnregUninList(Landroid/content/Context;Ljava/util/ArrayList;)V = UpdateUnregUninList(Android.Content.Context, System.Collections.IList)
com/tencent/android/tpush/service/channel/exception/ChannelException = Com.Tencent.Android.Tpush.Service.Channel.Exception.ChannelException
  <init>(ILjava/lang/String;)V = .ctor(int, string)
  <init>(ILjava/lang/String;Ljava/lang/Throwable;)V = .ctor(int, string, Java.Lang.Throwable)
  errorCode = ErrorCode
com/tencent/android/tpush/service/channel/exception/CommandMappingException = Com.Tencent.Android.Tpush.Service.Channel.Exception.CommandMappingException
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
com/tencent/android/tpush/service/channel/exception/HorseIgnoreException = Com.Tencent.Android.Tpush.Service.Channel.Exception.HorseIgnoreException
  <init>(Ljava/lang/Exception;)V = .ctor(Java.Lang.Exception)
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
com/tencent/android/tpush/service/channel/exception/InnerException = Com.Tencent.Android.Tpush.Service.Channel.Exception.InnerException
  <init>(Ljava/lang/String;)V = .ctor(string)
com/tencent/android/tpush/service/channel/exception/IORefusedException = Com.Tencent.Android.Tpush.Service.Channel.Exception.IORefusedException
  <init>(Ljava/lang/String;)V = .ctor(string)
com/tencent/android/tpush/service/channel/exception/NullReturnException = Com.Tencent.Android.Tpush.Service.Channel.Exception.NullReturnException
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Exception;)V = .ctor(string, Java.Lang.Exception)
com/tencent/android/tpush/service/channel/exception/SecurityException = Com.Tencent.Android.Tpush.Service.Channel.Exception.SecurityException
com/tencent/android/tpush/service/channel/exception/UnexpectedDataException = Com.Tencent.Android.Tpush.Service.Channel.Exception.UnexpectedDataException
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;Ljava/lang/Throwable;)V = .ctor(string, Java.Lang.Throwable)
com/tencent/android/tpush/service/channel/protocol/TPNS_CLIENT_REPORT_CMD = Com.Tencent.Android.Tpush.Service.Channel.Protocol.TPNS_CLIENT_REPORT_CMD
  CMD_REPORT_SPEED = CmdReportSpeed
  _CMD_REPORT_SPEED = CmdReportSpeed
com/tencent/android/tpush/service/channel/security/TpnsSecurity = Com.Tencent.Android.Tpush.Service.Channel.Security.TpnsSecurity
  <init>()V = .ctor()
  encKey = EncKey
  inc = Inc
  incRemote = IncRemote
  iv = Iv
  key = Key
  random = Random
  tpnsSecurityLibFullName = TpnsSecurityLibFullName
  getInc()J = Inc
  getRandom()J = Random
  checkRemoteInc(J)V = CheckRemoteInc(long)
  checkTpnsSecurityLibSo(Landroid/content/Context;)Z = CheckTpnsSecurityLibSo(Android.Content.Context)
  decryptByAES([BJ)[B = DecryptByAES(byte[], long)
  decryptData([B)[B = DecryptData(byte[])
  encryptByAES([BJ)[B = EncryptByAES(byte[], long)
  encryptByRSA([B)[B = EncryptByRSA(byte[])
  encryptData([B)[B = EncryptData(byte[])
  generateAESKey()[B = GenerateAESKey()
  generateIV(J)[B = GenerateIV(long)
  generateLocalSocketServieName(Landroid/content/Context;)Ljava/lang/String; = GenerateLocalSocketServieName(Android.Content.Context)
  generateLocalSocketServieNameNative(Ljava/lang/Object;)Ljava/lang/String; = GenerateLocalSocketServieNameNative(Java.Lang.Object)
  getBusinessDeviceId(Landroid/content/Context;)Ljava/lang/String; = GetBusinessDeviceId(Android.Content.Context)
  getBusinessDeviceIdNative(Ljava/lang/Object;)Ljava/lang/String; = GetBusinessDeviceIdNative(Java.Lang.Object)
  getEncKey()[B = GetEncKey()
  getEncryptAPKSignature(Landroid/content/Context;)Ljava/lang/String; = GetEncryptAPKSignature(Android.Content.Context)
  getEncryptAPKSignatureNative(Ljava/lang/Object;)Ljava/lang/String; = GetEncryptAPKSignatureNative(Java.Lang.Object)
  java_decryptByAES([BJ)[B = Java_decryptByAES(byte[], long)
  java_encryptByAES([BJ)[B = Java_encryptByAES(byte[], long)
  java_encryptByRSA([B)[B = Java_encryptByRSA(byte[])
  java_generateAESKey()[B = Java_generateAESKey()
  java_generateIV(J)[B = Java_generateIV(long)
  java_oiSymmetryDecrypt2Byte([B)[B = Java_oiSymmetryDecrypt2Byte(byte[])
  java_oiSymmetryEncrypt2Byte(Ljava/lang/String;)[B = Java_oiSymmetryEncrypt2Byte(string)
  needsUpdate()Z = NeedsUpdate()
  oiSymmetryDecrypt2(Ljava/lang/String;)Ljava/lang/String; = OiSymmetryDecrypt2(string)
  oiSymmetryDecrypt2Byte([B)[B = OiSymmetryDecrypt2Byte(byte[])
  oiSymmetryEncrypt2(Ljava/lang/String;)Ljava/lang/String; = OiSymmetryEncrypt2(string)
  oiSymmetryEncrypt2Byte(Ljava/lang/String;)[B = OiSymmetryEncrypt2Byte(string)
  reset()V = Reset()
  update()V = Update()
com/tencent/android/tpush/service/XGDaemonService = Com.Tencent.Android.Tpush.Service.XGDaemonService
  <init>()V = .ctor()
  onBind(Landroid/content/Intent;)Landroid/os/IBinder; = OnBind(Android.Content.Intent)
com/tencent/android/tpush/service/XGPushServiceV3 = Com.Tencent.Android.Tpush.Service.XGPushServiceV3
  <init>()V = .ctor()
  a = A
  b = B
  c = C
  a()V = A()
  b()Landroid/app/Service; = B()
  onBind(Landroid/content/Intent;)Landroid/os/IBinder; = OnBind(Android.Content.Intent)
com/tencent/android/tpush/service/XGWatchdog = Com.Tencent.Android.Tpush.Service.XGWatchdog
  CURRENT_WD_VERSION = CurrentWdVersion
  TAG = Tag
  getLocalXGApps()Ljava/lang/String; = LocalXGApps
  getRandomPort()I = RandomPort
  getWatchdogPort()I = WatchdogPort
  getInstance(Landroid/content/Context;)Lcom/tencent/android/tpush/service/XGWatchdog; = GetInstance(Android.Content.Context)
  getRandomInt(I)I = GetRandomInt(int)
  sendAllLocalXGAppList()V = SendAllLocalXGAppList()
  sendDebugMode(Z)V = SendDebugMode(bool)
  sendHeartbeat2Watchdog(Ljava/lang/String;)V = SendHeartbeat2Watchdog(string)
  sendXGApp(Ljava/lang/String;J)V = SendXGApp(string, long)
  startWatchdog()V = StartWatchdog()
com/tencent/android/tpush/SettingsContentProvider = Com.Tencent.Android.Tpush.SettingsContentProvider
  <init>()V = .ctor()
  BASE_URI = BaseUri
  BOOLEAN_TYPE = BooleanType
  FLOAT_TYPE = FloatType
  INT_TYPE = IntType
  KEY = Key
  LONG_TYPE = LongType
  PREFFERENCE_AUTHORITY = PrefferenceAuthority
  STRING_TYPE = StringType
  TYPE = Type
  delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I = Delete(Android.Net.Uri, string, string[])
  getBooleanValue(Landroid/database/Cursor;Z)Z = GetBooleanValue(Android.Database.ICursor, bool)
  getContentUri(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)Landroid/net/Uri; = GetContentUri(Android.Content.Context, string, string)
  getFloatValue(Landroid/database/Cursor;F)F = GetFloatValue(Android.Database.ICursor, float)
  getIntValue(Landroid/database/Cursor;I)I = GetIntValue(Android.Database.ICursor, int)
  getLongValue(Landroid/database/Cursor;J)J = GetLongValue(Android.Database.ICursor, long)
  getStringValue(Landroid/database/Cursor;Ljava/lang/String;)Ljava/lang/String; = GetStringValue(Android.Database.ICursor, string)
  getType(Landroid/net/Uri;)Ljava/lang/String; = GetType(Android.Net.Uri)
  insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri; = Insert(Android.Net.Uri, Android.Content.ContentValues)
  onCreate()Z = OnCreate()
  query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; = Query(Android.Net.Uri, string[], string, string[], string)
  update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I = Update(Android.Net.Uri, Android.Content.ContentValues, string, string[])
com/tencent/android/tpush/stat/event/EventType = Com.Tencent.Android.Tpush.Stat.Event.EventType
  ADDITION = Addition
  CUSTOM = Custom
  ERROR = Error
  LBS = Lbs
  MONITOR_STAT = MonitorStat
  MTA_GAME_USER = MtaGameUser
  NETWORK_DETECTOR = NetworkDetector
  NETWORK_MONITOR = NetworkMonitor
  PAGE_VIEW = PageView
  SESSION_ENV = SessionEnv
  a()I = A()
  valueOf(Ljava/lang/String;)Lcom/tencent/android/tpush/stat/event/EventType; = ValueOf(string)
  values()[Lcom/tencent/android/tpush/stat/event/EventType; = Values()
com/tencent/android/tpush/stat/StatReportStrategy = Com.Tencent.Android.Tpush.Stat.StatReportStrategy
  APP_LAUNCH = AppLaunch
  BATCH = Batch
  DEVELOPER = Developer
  INSTANT = Instant
  ONLY_WIFI = OnlyWifi
  ONLY_WIFI_NO_CACHE = OnlyWifiNoCache
  PERIOD = Period
  a()I = A()
  a(I)Lcom/tencent/android/tpush/stat/StatReportStrategy; = A(int)
  valueOf(Ljava/lang/String;)Lcom/tencent/android/tpush/stat/StatReportStrategy; = ValueOf(string)
  values()[Lcom/tencent/android/tpush/stat/StatReportStrategy; = Values()
com/tencent/android/tpush/XGDownloadService = Com.Tencent.Android.Tpush.XGDownloadService
  <init>()V = .ctor()
  a(Ljava/lang/String;Ljava/io/File;I)J = A(string, Java.IO.File, int)
  onBind(Landroid/content/Intent;)Landroid/os/IBinder; = OnBind(Android.Content.Intent)
com/tencent/android/tpush/XGIOperateCallback = Com.Tencent.Android.Tpush.IXGIOperateCallback
  onFail(Ljava/lang/Object;ILjava/lang/String;)V = OnFail(Java.Lang.Object, int, string)
  onSuccess(Ljava/lang/Object;I)V = OnSuccess(Java.Lang.Object, int)
com/tencent/android/tpush/XGIResult = Com.Tencent.Android.Tpush.IXGIResult
  parseIntent(Landroid/content/Intent;)V = ParseIntent(Android.Content.Intent)
com/tencent/android/tpush/XGLocalMessage = Com.Tencent.Android.Tpush.XGLocalMessage
  <init>()V = .ctor()
  getAction_type()I = Action_type
  setAction_type(I)V = Action_type
  getActivity()Ljava/lang/String; = Activity
  setActivity(Ljava/lang/String;)V = Activity
  getBuilderId()J = BuilderId
  setBuilderId(J)V = BuilderId
  getBusiMsgId()J = BusiMsgId
  setBusiMsgId(J)V = BusiMsgId
  getContent()Ljava/lang/String; = Content
  setContent(Ljava/lang/String;)V = Content
  getCustom_content()Ljava/lang/String; = Custom_content
  getDate()Ljava/lang/String; = Date
  setDate(Ljava/lang/String;)V = Date
  getExpirationTimeMs()J = ExpirationTimeMs
  setExpirationTimeMs(J)V = ExpirationTimeMs
  getHour()Ljava/lang/String; = Hour
  setHour(Ljava/lang/String;)V = Hour
  getIcon_res()Ljava/lang/String; = Icon_res
  setIcon_res(Ljava/lang/String;)V = Icon_res
  getIcon_type()I = Icon_type
  setIcon_type(I)V = Icon_type
  getIntent()Ljava/lang/String; = Intent
  setIntent(Ljava/lang/String;)V = Intent
  getLights()I = Lights
  setLights(I)V = Lights
  getMin()Ljava/lang/String; = Min
  setMin(Ljava/lang/String;)V = Min
  getMsgId()J = MsgId
  setMsgId(J)V = MsgId
  getNotificationId()I = NotificationId
  setNotificationId(I)V = NotificationId
  getPackageDownloadUrl()Ljava/lang/String; = PackageDownloadUrl
  setPackageDownloadUrl(Ljava/lang/String;)V = PackageDownloadUrl
  getPackageName()Ljava/lang/String; = PackageName
  setPackageName(Ljava/lang/String;)V = PackageName
  getRing()I = Ring
  setRing(I)V = Ring
  getRing_raw()Ljava/lang/String; = Ring_raw
  setRing_raw(Ljava/lang/String;)V = Ring_raw
  getSmall_icon()Ljava/lang/String; = Small_icon
  setSmall_icon(Ljava/lang/String;)V = Small_icon
  getStyle_id()I = Style_id
  setStyle_id(I)V = Style_id
  getTitle()Ljava/lang/String; = Title
  setTitle(Ljava/lang/String;)V = Title
  getTtl()I = Ttl
  getType()I = Type
  setType(I)V = Type
  getUrl()Ljava/lang/String; = Url
  setUrl(Ljava/lang/String;)V = Url
  getVibrate()I = Vibrate
  setVibrate(I)V = Vibrate
  setCustomContent(Ljava/util/HashMap;)V = SetCustomContent(System.Collections.IDictionary)
com/tencent/android/tpush/XGNotifaction = Com.Tencent.Android.Tpush.XGNotifaction
  getContent()Ljava/lang/String; = Content
  getCustomContent()Ljava/lang/String; = CustomContent
  getNotifaction()Landroid/app/Notification; = Notifaction
  getNotifyId()I = NotifyId
  setNotifyId(I)V = NotifyId
  getTitle()Ljava/lang/String; = Title
  doNotify()Z = DoNotify()
com/tencent/android/tpush/XGPro = Com.Tencent.Android.Tpush.XGPro
  <init>()V = .ctor()
  enableXGPro(Landroid/content/Context;Z)V = EnableXGPro(Android.Content.Context, bool)
  isEnableXGPro(Landroid/content/Context;)Z = IsEnableXGPro(Android.Content.Context)
com/tencent/android/tpush/XGPush4Msdk = Com.Tencent.Android.Tpush.XGPush4Msdk
  <init>()V = .ctor()
  addLocalNotification(Landroid/content/Context;Lcom/tencent/android/tpush/XGLocalMessage;)J = AddLocalNotification(Android.Content.Context, Com.Tencent.Android.Tpush.XGLocalMessage)
  deleteTag(Landroid/content/Context;Ljava/lang/String;)V = DeleteTag(Android.Content.Context, string)
  getDebugServerInfo(Landroid/content/Context;)Ljava/lang/String; = GetDebugServerInfo(Android.Content.Context)
  getQQAccessId(Landroid/content/Context;)J = GetQQAccessId(Android.Content.Context)
  getQQAppKey(Landroid/content/Context;)Ljava/lang/String; = GetQQAppKey(Android.Content.Context)
  registerPush(Landroid/content/Context;Ljava/lang/String;Lcom/tencent/android/tpush/XGIOperateCallback;)V = RegisterPush(Android.Content.Context, string, Com.Tencent.Android.Tpush.IXGIOperateCallback)
  setDebugServerInfo(Landroid/content/Context;Ljava/lang/String;I)V = SetDebugServerInfo(Android.Content.Context, string, int)
  setQQAppId(Landroid/content/Context;J)V = SetQQAppId(Android.Content.Context, long)
  setQQAppKey(Landroid/content/Context;Ljava/lang/String;)V = SetQQAppKey(Android.Content.Context, string)
  setTag(Landroid/content/Context;Ljava/lang/String;)V = SetTag(Android.Content.Context, string)
  unregisterPush(Landroid/content/Context;Lcom/tencent/android/tpush/XGIOperateCallback;)V = UnregisterPush(Android.Content.Context, Com.Tencent.Android.Tpush.IXGIOperateCallback)
com/tencent/android/tpush/XGPushActivity = Com.Tencent.Android.Tpush.XGPushActivity
  <init>()V = .ctor()
  addActivityNames(Ljava/lang/String;)V = AddActivityNames(string)
  isMonitorActivityNames(Ljava/lang/String;)Z = IsMonitorActivityNames(string)
com/tencent/android/tpush/XGPushBaseReceiver = Com.Tencent.Android.Tpush.XGPushBaseReceiver
  <init>()V = .ctor()
  SUCCESS = Success
  onDeleteTagResult(Landroid/content/Context;ILjava/lang/String;)V = OnDeleteTagResult(Android.Content.Context, int, string)
  onNotifactionClickedResult(Landroid/content/Context;Lcom/tencent/android/tpush/XGPushClickedResult;)V = OnNotifactionClickedResult(Android.Content.Context, Com.Tencent.Android.Tpush.XGPushClickedResult)
  onNotifactionShowedResult(Landroid/content/Context;Lcom/tencent/android/tpush/XGPushShowedResult;)V = OnNotifactionShowedResult(Android.Content.Context, Com.Tencent.Android.Tpush.XGPushShowedResult)
  onReceive(Landroid/content/Context;Landroid/content/Intent;)V = OnReceive(Android.Content.Context, Android.Content.Intent)
  onRegisterResult(Landroid/content/Context;ILcom/tencent/android/tpush/XGPushRegisterResult;)V = OnRegisterResult(Android.Content.Context, int, Com.Tencent.Android.Tpush.XGPushRegisterResult)
  onSetTagResult(Landroid/content/Context;ILjava/lang/String;)V = OnSetTagResult(Android.Content.Context, int, string)
  onTextMessage(Landroid/content/Context;Lcom/tencent/android/tpush/XGPushTextMessage;)V = OnTextMessage(Android.Content.Context, Com.Tencent.Android.Tpush.XGPushTextMessage)
  onUnregisterResult(Landroid/content/Context;I)V = OnUnregisterResult(Android.Content.Context, int)
com/tencent/android/tpush/XGPushClickedResult = Com.Tencent.Android.Tpush.XGPushClickedResult
  <init>()V = .ctor()
  NOTIFACTION_CLICKED_TYPE = NotifactionClickedType
  NOTIFACTION_DELETED_TYPE = NotifactionDeletedType
  NOTIFACTION_DOWNLOAD_CANCEL_TYPE = NotifactionDownloadCancelType
  NOTIFACTION_DOWNLOAD_TYPE = NotifactionDownloadType
  NOTIFACTION_OPEN_CANCEL_TYPE = NotifactionOpenCancelType
  NOTIFACTION_OPEN_TYPE = NotifactionOpenType
  NOTIFICATION_ACTION_ACTIVITY = NotificationActionActivity
  getActionType()J = ActionType
  getActivityName()Ljava/lang/String; = ActivityName
  getContent()Ljava/lang/String; = Content
  getCustomContent()Ljava/lang/String; = CustomContent
  getMsgId()J = MsgId
  getNotificationActionType()I = NotificationActionType
  getTitle()Ljava/lang/String; = Title
  parseIntent(Landroid/content/Intent;)V = ParseIntent(Android.Content.Intent)
com/tencent/android/tpush/XGPushConfig = Com.Tencent.Android.Tpush.XGPushConfig
  <init>()V = .ctor()
  enableApplist = EnableApplist
  enableDebug = EnableDebug
  enableLocation = EnableLocation
  enableNotification = EnableNotification
  isForeiginPush = IsForeiginPush
  _isHuaweiDebug = IsHuaweiDebug
  isUsedFcmPush = IsUsedFcmPush
  isUsedOtherPush = IsUsedOtherPush
  TPUSH_ACCESS_ID = TpushAccessId
  TPUSH_ACCESS_KEY = TpushAccessKey
  isHuaweiDebug()Z = HuaweiDebug
  setHuaweiDebug(Z)V = HuaweiDebug
  enableDebug(Landroid/content/Context;Z)V = EnableDebug(Android.Content.Context, bool)
  enableFcmPush(Landroid/content/Context;Z)V = EnableFcmPush(Android.Content.Context, bool)
  enableOtherPush(Landroid/content/Context;Z)V = EnableOtherPush(Android.Content.Context, bool)
  getAccessId(Landroid/content/Context;)J = GetAccessId(Android.Content.Context)
  getAccessidList(Landroid/content/Context;)Ljava/util/List; = GetAccessidList(Android.Content.Context)
  getAccessKey(Landroid/content/Context;)Ljava/lang/String; = GetAccessKey(Android.Content.Context)
  getGameServer(Landroid/content/Context;)Ljava/lang/String; = GetGameServer(Android.Content.Context)
  getInstallChannel(Landroid/content/Context;)Ljava/lang/String; = GetInstallChannel(Android.Content.Context)
  getReportDebugMode(Landroid/content/Context;)Z = GetReportDebugMode(Android.Content.Context)
  getToken(Landroid/content/Context;)Ljava/lang/String; = GetToken(Android.Content.Context)
  isEnableDebug(Landroid/content/Context;)Z = IsEnableDebug(Android.Content.Context)
  isForeiginPush(Landroid/content/Context;)Z = IsForeiginPush(Android.Content.Context)
  isLocationEnable(Landroid/content/Context;)Z = IsLocationEnable(Android.Content.Context)
  isReportApplistEnable(Landroid/content/Context;)Z = IsReportApplistEnable(Android.Content.Context)
  isReportNotificationStatusEnable(Landroid/content/Context;)Z = IsReportNotificationStatusEnable(Android.Content.Context)
  isUsedFcmPush(Landroid/content/Context;)Z = IsUsedFcmPush(Android.Content.Context)
  isUsedOtherPush(Landroid/content/Context;)Z = IsUsedOtherPush(Android.Content.Context)
  setAccessId(Landroid/content/Context;J)V = SetAccessId(Android.Content.Context, long)
  setAccessKey(Landroid/content/Context;Ljava/lang/String;)V = SetAccessKey(Android.Content.Context, string)
  setfcmSenderId(Landroid/content/Context;Ljava/lang/String;)V = SetfcmSenderId(Android.Content.Context, string)
  setForeiginPushEnable(Landroid/content/Context;Z)V = SetForeiginPushEnable(Android.Content.Context, bool)
  setGameServer(Landroid/content/Context;Ljava/lang/String;)V = SetGameServer(Android.Content.Context, string)
  setHeartbeatIntervalMs(Landroid/content/Context;I)V = SetHeartbeatIntervalMs(Android.Content.Context, int)
  setInstallChannel(Landroid/content/Context;Ljava/lang/String;)V = SetInstallChannel(Android.Content.Context, string)
  setLocationEnable(Landroid/content/Context;Z)V = SetLocationEnable(Android.Content.Context, bool)
  setMiPushAppId(Landroid/content/Context;Ljava/lang/String;)V = SetMiPushAppId(Android.Content.Context, string)
  setMiPushAppKey(Landroid/content/Context;Ljava/lang/String;)V = SetMiPushAppKey(Android.Content.Context, string)
  setMzPushAppId(Landroid/content/Context;Ljava/lang/String;)V = SetMzPushAppId(Android.Content.Context, string)
  setMzPushAppKey(Landroid/content/Context;Ljava/lang/String;)V = SetMzPushAppKey(Android.Content.Context, string)
  setReportApplistEnable(Landroid/content/Context;Z)V = SetReportApplistEnable(Android.Content.Context, bool)
  setReportDebugMode(Landroid/content/Context;Z)V = SetReportDebugMode(Android.Content.Context, bool)
  setReportNotificationStatusEnable(Landroid/content/Context;Z)V = SetReportNotificationStatusEnable(Android.Content.Context, bool)
com/tencent/android/tpush/XGPushConstants = Com.Tencent.Android.Tpush.XGPushConstants
  <init>()V = .ctor()
com/tencent/android/tpush/XGPushManager = Com.Tencent.Android.Tpush.XGPushManager
  enableService = EnableService
  ENABLE_SERVICE_SUFFIX = EnableServiceSuffix
  lastSuccessRegisterMap = LastSuccessRegisterMap
  OPERATION_FAIL = OperationFail
  OPERATION_REQ_REGISTER = OperationReqRegister
  OPERATION_REQ_UNREGISTER = OperationReqUnregister
  OPERATION_SUCCESS = OperationSuccess
  getContext()Landroid/content/Context; = Context
  setContext(Landroid/content/Context;)V = Context
  getNotifactionCallback()Lcom/tencent/android/tpush/XGPushNotifactionCallback; = NotifactionCallback
  setNotifactionCallback(Lcom/tencent/android/tpush/XGPushNotifactionCallback;)V = NotifactionCallback
  addLocalNotification(Landroid/content/Context;Lcom/tencent/android/tpush/XGLocalMessage;)J = AddLocalNotification(Android.Content.Context, Com.Tencent.Android.Tpush.XGLocalMessage)
  appendAccount(Landroid/content/Context;Ljava/lang/String;)V = AppendAccount(Android.Content.Context, string)
  appendAccount(Landroid/content/Context;Ljava/lang/String;Lcom/tencent/android/tpush/XGIOperateCallback;)V = AppendAccount(Android.Content.Context, string, Com.Tencent.Android.Tpush.IXGIOperateCallback)
  bindAccount(Landroid/content/Context;Ljava/lang/String;)V = BindAccount(Android.Content.Context, string)
  bindAccount(Landroid/content/Context;Ljava/lang/String;Lcom/tencent/android/tpush/XGIOperateCallback;)V = BindAccount(Android.Content.Context, string, Com.Tencent.Android.Tpush.IXGIOperateCallback)
  cancelAllNotifaction(Landroid/content/Context;)V = CancelAllNotifaction(Android.Content.Context)
  cancelNotifaction(Landroid/content/Context;I)V = CancelNotifaction(Android.Content.Context, int)
  clearLocalNotifications(Landroid/content/Context;)V = ClearLocalNotifications(Android.Content.Context)
  delAccount(Landroid/content/Context;Ljava/lang/String;)V = DelAccount(Android.Content.Context, string)
  delAccount(Landroid/content/Context;Ljava/lang/String;Lcom/tencent/android/tpush/XGIOperateCallback;)V = DelAccount(Android.Content.Context, string, Com.Tencent.Android.Tpush.IXGIOperateCallback)
  delAllAccount(Landroid/content/Context;)V = DelAllAccount(Android.Content.Context)
  delAllAccount(Landroid/content/Context;Lcom/tencent/android/tpush/XGIOperateCallback;)V = DelAllAccount(Android.Content.Context, Com.Tencent.Android.Tpush.IXGIOperateCallback)
  deleteKeyValueTag(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = DeleteKeyValueTag(Android.Content.Context, string, string)
  deleteTag(Landroid/content/Context;Ljava/lang/String;)V = DeleteTag(Android.Content.Context, string)
  enableService(Landroid/content/Context;Z)V = EnableService(Android.Content.Context, bool)
  getServiceStatus(Landroid/content/Context;)I = GetServiceStatus(Android.Content.Context)
  getServiceTag(Landroid/content/Context;)Ljava/lang/String; = GetServiceTag(Android.Content.Context)
  isNotificationOpened(Landroid/content/Context;)Z = IsNotificationOpened(Android.Content.Context)
  onActivityStarted(Landroid/app/Activity;)Lcom/tencent/android/tpush/XGPushClickedResult; = OnActivityStarted(Android.App.Activity)
  onActivityStoped(Landroid/app/Activity;)V = OnActivityStoped(Android.App.Activity)
  onMessageCleared(Landroid/content/Context;Lcom/tencent/android/tpush/XGPushTextMessage;)V = OnMessageCleared(Android.Content.Context, Com.Tencent.Android.Tpush.XGPushTextMessage)
  onMessageClicked(Landroid/content/Context;Lcom/tencent/android/tpush/XGPushTextMessage;)V = OnMessageClicked(Android.Content.Context, Com.Tencent.Android.Tpush.XGPushTextMessage)
  openNotification(Landroid/content/Context;)V = OpenNotification(Android.Content.Context)
  openNotificationSettings(Landroid/content/Context;)V = OpenNotificationSettings(Android.Content.Context)
  registerPush(Landroid/content/Context;)V = RegisterPush(Android.Content.Context)
  registerPush(Landroid/content/Context;Lcom/tencent/android/tpush/XGIOperateCallback;)V = RegisterPush(Android.Content.Context, Com.Tencent.Android.Tpush.IXGIOperateCallback)
  registerPush(Landroid/content/Context;Ljava/lang/String;)V = RegisterPush(Android.Content.Context, string)
  registerPush(Landroid/content/Context;Ljava/lang/String;Lcom/tencent/android/tpush/XGIOperateCallback;)V = RegisterPush(Android.Content.Context, string, Com.Tencent.Android.Tpush.IXGIOperateCallback)
  registerPush(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;Lcom/tencent/android/tpush/XGIOperateCallback;)V = RegisterPush(Android.Content.Context, string, string, int, string, Com.Tencent.Android.Tpush.IXGIOperateCallback)
  sendCommReport2Service(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = SendCommReport2Service(Android.Content.Context, string, string)
  setKeyValueTag(Landroid/content/Context;Ljava/lang/String;Ljava/lang/String;)V = SetKeyValueTag(Android.Content.Context, string, string)
  setTag(Landroid/content/Context;Ljava/lang/String;)V = SetTag(Android.Content.Context, string)
  startPushService(Landroid/content/Context;)V = StartPushService(Android.Content.Context)
  unregisterPush(Landroid/content/Context;)V = UnregisterPush(Android.Content.Context)
  unregisterPush(Landroid/content/Context;Lcom/tencent/android/tpush/XGIOperateCallback;)V = UnregisterPush(Android.Content.Context, Com.Tencent.Android.Tpush.IXGIOperateCallback)
com/tencent/android/tpush/XGPushNotifactionCallback = Com.Tencent.Android.Tpush.IXGPushNotifactionCallback
  handleNotify(Lcom/tencent/android/tpush/XGNotifaction;)V = HandleNotify(Com.Tencent.Android.Tpush.XGNotifaction)
com/tencent/android/tpush/XGPushProvider = Com.Tencent.Android.Tpush.XGPushProvider
  <init>()V = .ctor()
  AUTH_PRIX = AuthPrix
  STR_GET_PULLUP = StrGetPullup
  TAG = Tag
  delete(Landroid/net/Uri;Ljava/lang/String;[Ljava/lang/String;)I = Delete(Android.Net.Uri, string, string[])
  getType(Landroid/net/Uri;)Ljava/lang/String; = GetType(Android.Net.Uri)
  insert(Landroid/net/Uri;Landroid/content/ContentValues;)Landroid/net/Uri; = Insert(Android.Net.Uri, Android.Content.ContentValues)
  onCreate()Z = OnCreate()
  query(Landroid/net/Uri;[Ljava/lang/String;Ljava/lang/String;[Ljava/lang/String;Ljava/lang/String;)Landroid/database/Cursor; = Query(Android.Net.Uri, string[], string, string[], string)
  update(Landroid/net/Uri;Landroid/content/ContentValues;Ljava/lang/String;[Ljava/lang/String;)I = Update(Android.Net.Uri, Android.Content.ContentValues, string, string[])
com/tencent/android/tpush/XGPushReceiver = Com.Tencent.Android.Tpush.XGPushReceiver
  <init>()V = .ctor()
  onReceive(Landroid/content/Context;Landroid/content/Intent;)V = OnReceive(Android.Content.Context, Android.Content.Intent)
com/tencent/android/tpush/XGPushRegisterResult = Com.Tencent.Android.Tpush.XGPushRegisterResult
  getAccessId()J = AccessId
  getAccount()Ljava/lang/String; = Account
  getDeviceId()Ljava/lang/String; = DeviceId
  getTicket()Ljava/lang/String; = Ticket
  getTicketType()S = TicketType
  getToken()Ljava/lang/String; = Token
  parseIntent(Landroid/content/Intent;)V = ParseIntent(Android.Content.Intent)
  toJson()Lorg/json/JSONObject; = ToJson()
com/tencent/android/tpush/XGPushShowedResult = Com.Tencent.Android.Tpush.XGPushShowedResult
  <init>()V = .ctor()
  NOTIFICATION_ACTION_ACTIVITY = NotificationActionActivity
  NOTIFICATION_ACTION_INTENT = NotificationActionIntent
  NOTIFICATION_ACTION_PACKAGE = NotificationActionPackage
  NOTIFICATION_ACTION_URL = NotificationActionUrl
  getActivity()Ljava/lang/String; = Activity
  getContent()Ljava/lang/String; = Content
  getCustomContent()Ljava/lang/String; = CustomContent
  getMsgId()J = MsgId
  getNotifactionId()I = NotifactionId
  getNotificationActionType()I = NotificationActionType
  getTitle()Ljava/lang/String; = Title
  parseIntent(Landroid/content/Intent;)V = ParseIntent(Android.Content.Intent)
com/tencent/android/tpush/XGPushTextMessage = Com.Tencent.Android.Tpush.XGPushTextMessage
  <init>()V = .ctor()
  getContent()Ljava/lang/String; = Content
  getCustomContent()Ljava/lang/String; = CustomContent
  getTitle()Ljava/lang/String; = Title
